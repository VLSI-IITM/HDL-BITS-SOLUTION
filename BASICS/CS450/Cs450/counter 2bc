module top_module(
    input clk,
    input areset,
    input train_valid,
    input train_taken,
    output [1:0] state
);
    
   // reg [1:0] State,next_state;
     reg [1:0] next_state;
    localparam SNT =2'b00,
               WNT =2'b01,
               WT  =2'b10,
               ST  =2'b11;
    
    
    always@(posedge clk or posedge areset) begin
        if(areset) state <= WNT;
        else state <= next_state;  
    end
    
    always@(*) begin
        casex({train_valid,train_taken,state})
            {2'b11,SNT} : next_state  =    WNT ;
            {2'b11,WNT} : next_state   =   WT  ;
            {2'b11,WT}  : next_state   =   ST  ;
            {2'b11,ST}  : next_state   =   ST ;
            
            {2'b10,SNT} : next_state   =    SNT ;
            {2'b10,ST} : next_state   =     WT  ;
            {2'b10,WT}  : next_state   =    WNT  ;
            {2'b10,WNT}  : next_state   =   SNT ;
            
            {2'b0x,SNT} : next_state   =    SNT ;
            {2'b0x,ST} : next_state   =     ST  ;
            {2'b0x,WT}  : next_state   =    WT  ;
            {2'b0x,WNT}  : next_state   =   WNT ;
            
            default : next_state = WNT;
            
        endcase
            
     
            
    end

endmodule
